---
title: ":blue_book: Code chunks"
warning: false
---

## Introduction

As the number of programming languages used for scientific discourse is very broad, Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia. building on the RStudio (R) and Jupyter (Python, Julia) ecosystems which are very popular.

In this section, we will see how to use and mix R, Stata and Python within Quarto so that you can make the most out of it.

## Create code chunks

::: callout-tip

* Use backticks
* Click on icon
* Keyboard shortcut `Ctrl` + `Alt` + `I`

:::

## R code chunks

::: callout-note
A **data frame** is a two-dimensional array-like structure that contains rows and columns.
:::

To store the content of the *iris* data set in data frame `df`, you can use `=` (*equal*) but good practice recommend using `<-` (*back arrow*) to indicate the direction of your allocation.

```{r}
#| echo: fenced
df <- iris
```

How to display data

```{r}
#| echo: fenced
#| df-print: kable
library(dplyr)
knitr::kable(head(df, 10))
```

The pipe operator

```{r}
#| echo: fenced
#| df-print: kable
library(dplyr)
df %>%
  head(10) %>%
  knitr::kable()
```

You can cross-reference your table @tbl-iris

```{r}
#| label: tbl-iris
#| tbl-cap: Iris data set
#| echo: fenced
#| df-print: kable
df %>% 
  knitr::kable()
```

## Execute Stata commands within R code chunks

Stata is not a language supported by Quarto. To use Stata within Quarto, you have to use the [RStata](https://cran.r-project.org/web/packages/RStata/README.html) R package, which is a simple R / Stata interface that enables you to:

* execute Stata commands (inline or from a `.do` file) from R;
* pass a data frame to Stata;
* return Stata outputs (including modified data frames) to R.

```{r}
#| echo: fenced
if ( !require(RStata) ) {
  install.packages('RStata')
}
library(RStata)
```

### Configure RStudio to execute Stata

#### Find your Stata binary path

The function `chooseStataBin` from the `RStata` library allows you to browse and set the path to your Stata binary executable.

```{{r}}
stata_bin_path <- RStata::chooseStataBin()
print(stata_bin_path)
```

When you run this code, you should normally get a path which is of the format: **"\"C:\\Program Files\\Stata16\\StataIC-64\""**. Note that the `.exe` extension has been removed from this path. It is important that you keep the format as is, as otherwise your Stata engine will not be recognised.

#### Add your Stata binary path to your .Rprofile

The Stata binary path setting we just created is just for your current RStudio session and it will be lost once your RStudio is closed.
To keep this setting each time you are using RStudio and avoid havin to reconfigure RStata each time you are restarting RStudio, let us add the Stata binary path as an option to `.Rprofile`, which is your user-specific R configuration file.

```{r}
library(usethis)
```

`Usethis` is a workflow package: it automates repetitive tasks that arise during project setup and development, both for R packages and non-package projects.

The function `edit_r_profile` from the `usethis` library allows to open your configuration file `.Rprofile`.

```{{r}}
usethis::edit_r_profile("user")
```

Add the following two lines in the Rprofile file that you have just opened:

* options("RStata.StataPath" = ...)
* options("RStata.StataVersion" = ...)

You need to indicate the path to your Stata binary executable in the `RStata.StataPath` option (e.g., "\"C:\\Program Files\\Stata16\\StataIC-64\"") and the version of your Stata (e.g., 16) in the `RStata.StataVersion` option.

after indicating the path and version your code should look as specified below

* options("RStata.StataPath" = "\"C:\\Program Files (x86)\\Stata15\\Stata-64\"")
* options("RStata.StataVersion" = 15)

Once you are done, save and close your `.Rprofile`.

## Python code chunks

::: callout-warning
This section is for (advanced) Python/R Markdown users only
:::

You still need to import the R package `reticulate` if you want to use the Knitr engine and manipulate Python objects within R code chunks.

```{r}
#| echo: fenced
library(reticulate)
```

### Call R objects in Python code chunks

R objects can be manipulated in Python code chunks by referring to them as `r.`

```{r}
#| echo: fenced
val <- 10
```

```{python}
#| echo: fenced
val = 5
print(r.val)
```

### Call Python objects in R code chunks

Python objects can be manipulated in R code chunks by referring to them as `py$`

```{r}
#| echo: fenced
print(val)
print(py$val)
```