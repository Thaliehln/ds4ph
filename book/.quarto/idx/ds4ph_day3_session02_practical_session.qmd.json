{"title":"Data Science for Public Health - Day 3 - Session 2","markdown":{"yaml":{"title":"Data Science for Public Health - Day 3 - Session 2","date":"2022-09-27","format":{"html":{"toc":true,"number-sections":true}},"editor":"visual","execute":{"echo":false,"warning":false}},"containsRefs":false,"markdown":"\n\nFirst model with scikit-learn\n\nIn this notebook, we present how to build predictive models on tabular datasets, with only numerical features.\n\nIn particular we will highlight:\n\n    the scikit-learn API: .fit(X, y)/.predict(X)/.score(X, y);\n\n    how to evaluate the generalization performance of a model with a train-test split.\n\nLoading the dataset with Pandas\n\nWe will use the same dataset “adult_census” described in the previous notebook. For more details about the dataset see http://www.openml.org/d/1590.\n\nNumerical data is the most natural type of data used in machine learning and can (almost) directly be fed into predictive models. We will load a subset of the original data with only the numerical columns.\n\nimport pandas as pd\n\nadult_census = pd.read_csv(\"../datasets/adult-census-numeric.csv\")\n\nLet’s have a look at the first records of this dataframe:\n\nadult_census.head()\n\n\tage \tcapital-gain \tcapital-loss \thours-per-week \tclass\n0 \t41 \t0 \t0 \t92 \t<=50K\n1 \t48 \t0 \t0 \t40 \t<=50K\n2 \t60 \t0 \t0 \t25 \t<=50K\n3 \t37 \t0 \t0 \t45 \t<=50K\n4 \t73 \t3273 \t0 \t40 \t<=50K\n\nWe see that this CSV file contains all information: the target that we would like to predict (i.e. \"class\") and the data that we want to use to train our predictive model (i.e. the remaining columns). The first step is to separate columns to get on one side the target and on the other side the data.\nSeparate the data and the target\n\ntarget_name = \"class\"\ntarget = adult_census[target_name]\ntarget\n\n0         <=50K\n1         <=50K\n2         <=50K\n3         <=50K\n4         <=50K\n          ...  \n39068     <=50K\n39069     <=50K\n39070      >50K\n39071     <=50K\n39072      >50K\nName: class, Length: 39073, dtype: object\n\ndata = adult_census.drop(columns=[target_name, ])\ndata.head()\n\n\tage \tcapital-gain \tcapital-loss \thours-per-week\n0 \t41 \t0 \t0 \t92\n1 \t48 \t0 \t0 \t40\n2 \t60 \t0 \t0 \t25\n3 \t37 \t0 \t0 \t45\n4 \t73 \t3273 \t0 \t40\n\nWe can now linger on the variables, also denominated features, that we will use to build our predictive model. In addition, we can also check how many samples are available in our dataset.\n\ndata.columns\n\nIndex(['age', 'capital-gain', 'capital-loss', 'hours-per-week'], dtype='object')\n\nprint(f\"The dataset contains {data.shape[0]} samples and \"\n      f\"{data.shape[1]} features\")\n\nThe dataset contains 39073 samples and 4 features\n\nFit a model and make predictions\n\nWe will build a classification model using the “K-nearest neighbors” strategy. To predict the target of a new sample, a k-nearest neighbors takes into account its k closest samples in the training set and predicts the majority target of these samples.\n\nCaution\n\nWe use a K-nearest neighbors here. However, be aware that it is seldom useful in practice. We use it because it is an intuitive algorithm. In the next notebook, we will introduce better models.\n\nThe fit method is called to train the model from the input (features) and target data.\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier()\n_ = model.fit(data, target)\n\nLearning can be represented as follows:\n\nPredictor fit diagram\n\nThe method fit is composed of two elements: (i) a learning algorithm and (ii) some model states. The learning algorithm takes the training data and training target as input and sets the model states. These model states will be used later to either predict (for classifiers and regressors) or transform data (for transformers).\n\nBoth the learning algorithm and the type of model states are specific to each type of model.\n\nNote\n\nHere and later, we use the name data and target to be explicit. In scikit-learn documentation, data is commonly named X and target is commonly called y.\n\nLet’s use our model to make some predictions using the same dataset.\n\ntarget_predicted = model.predict(data)\n\nWe can illustrate the prediction mechanism as follows:\n\nPredictor predict diagram\n\nTo predict, a model uses a prediction function that will use the input data together with the model states. As for the learning algorithm and the model states, the prediction function is specific for each type of model.\n\nLet’s now have a look at the computed predictions. For the sake of simplicity, we will look at the five first predicted targets.\n\ntarget_predicted[:5]\n\narray([' >50K', ' <=50K', ' <=50K', ' <=50K', ' <=50K'], dtype=object)\n\nIndeed, we can compare these predictions to the actual data…\n\ntarget[:5]\n\n0     <=50K\n1     <=50K\n2     <=50K\n3     <=50K\n4     <=50K\nName: class, dtype: object\n\n…and we could even check if the predictions agree with the real targets:\n\ntarget[:5] == target_predicted[:5]\n\n0    False\n1     True\n2     True\n3     True\n4     True\nName: class, dtype: bool\n\nprint(f\"Number of correct prediction: \"\n      f\"{(target[:5] == target_predicted[:5]).sum()} / 5\")\n\nNumber of correct prediction: 4 / 5\n\nHere, we see that our model makes a mistake when predicting for the first sample.\n\nTo get a better assessment, we can compute the average success rate.\n\n(target == target_predicted).mean()\n\n0.8242776341719346\n\nThis result means that the model makes a correct prediction for approximately 82 samples out of 100. Note that we used the same data to train and evaluate our model. Can this evaluation be trusted or is it too good to be true?\nTrain-test data split\n\nWhen building a machine learning model, it is important to evaluate the trained model on data that was not used to fit it, as generalization is more than memorization (meaning we want a rule that generalizes to new data, without comparing to data we memorized). It is harder to conclude on never-seen instances than on already seen ones.\n\nCorrect evaluation is easily done by leaving out a subset of the data when training the model and using it afterwards for model evaluation. The data used to fit a model is called training data while the data used to assess a model is called testing data.\n\nWe can load more data, which was actually left-out from the original data set.\n\nadult_census_test = pd.read_csv('../datasets/adult-census-numeric-test.csv')\n\nFrom this new data, we separate our input features and the target to predict, as in the beginning of this notebook.\n\ntarget_test = adult_census_test[target_name]\ndata_test = adult_census_test.drop(columns=[target_name, ])\n\nWe can check the number of features and samples available in this new set.\n\nprint(f\"The testing dataset contains {data_test.shape[0]} samples and \"\n      f\"{data_test.shape[1]} features\")\n\nThe testing dataset contains 9769 samples and 4 features\n\nInstead of computing the prediction and manually computing the average success rate, we can use the method score. When dealing with classifiers this method returns their performance metric.\n\naccuracy = model.score(data_test, target_test)\nmodel_name = model.__class__.__name__\n\nprint(f\"The test accuracy using a {model_name} is \"\n      f\"{accuracy:.3f}\")\n\nThe test accuracy using a KNeighborsClassifier is 0.804\n\nLet’s check the underlying mechanism when the score method is called:\n\nPredictor score diagram\n\nTo compute the score, the predictor first computes the predictions (using the predict method) and then uses a scoring function to compare the true target y and the predictions. Finally, the score is returned.\n\nIf we compare with the accuracy obtained by wrongly evaluating the model on the training set, we find that this evaluation was indeed optimistic compared to the score obtained on a held-out test set.\n\nIt shows the importance to always testing the generalization performance of predictive models on a different set than the one used to train these models. We will discuss later in more detail how predictive models should be evaluated.\n\nNote\n\nIn this MOOC, we will refer to generalization performance of a model when referring to the test score or test error obtained by comparing the prediction of a model and the true targets. Equivalent terms for generalization performance are predictive performance and statistical performance. We will refer to computational performance of a predictive model when assessing the computational costs of training a predictive model or using it to make predictions.\nNotebook Recap\n\nIn this notebook we:\n\n    fitted a k-nearest neighbors model on a training dataset;\n\n    evaluated its generalization performance on the testing data;\n\n    introduced the scikit-learn API .fit(X, y) (to train a model), .predict(X) (to make predictions) and .score(X, y) (to evaluate a model).\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","from":"markdown+emoji","toc":true,"number-sections":true,"output-file":"ds4ph_day3_session02_practical_session.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","bibliography":["references.bib"],"csl":"vancouver.csl","theme":"cosmo","title":"Data Science for Public Health - Day 3 - Session 2","date":"2022-09-27","editor":"visual"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","from":"markdown+emoji","output-file":"ds4ph_day3_session02_practical_session.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"csl":"vancouver.csl","documentclass":"scrreprt","title":"Data Science for Public Health - Day 3 - Session 2","date":"2022-09-27","editor":"visual"},"extensions":{"book":{}}}}}