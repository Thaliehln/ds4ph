{
  "hash": "e1c3037fdd52827507a57e21eb4f6135",
  "result": {
    "markdown": "---\ntitle: \"Import external data\"\n---\n\n\n## Introduction\n\nMost of the time you will want to generate *Quarto* documents using your own data. To this aim, you will have to import data from external sources: files, URLs, or server data (e.g., ODK Central data).\n\nIf you want to further process / analyse your data, you will have to store the imported data in a data frame.\n\nYou can store multiple data sets in memory (which will be stored in different data frames) and work on all of them in parallel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'reticulate' wurde unter R Version 4.1.3 erstellt\n```\n:::\n:::\n\n\n\n\n## Import data from files\n\nThere is a dedicated importing function in R and Python for almost every data format. In this session we show you how to read Stata (`.dta`), Excel (`.xlsx`) and comma-separated values (CSV, `.csv`) formats.\n\nOnly one argument is required within these function. We need to know the PATH where the file is stored.\n\n### Import Excel data\n\n::: panel-tabset\n#### Exercise 1\n\nRead the Excel data set **dataset1.xlsx** and store it into a data frame called **df1**.\n\n::: callout-tip\n-   Stata: use the import excel Stata command with the `stata` function from the `RStata` package.\n-   R: use the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n-   Python: use the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here\n```\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RStata)\ndf1 <- RStata::stata(\"import excel dataset1.xlsx\",\n                     data.out = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. import excel dataset1.xlsx\n(5 vars, 151 obs)\n```\n:::\n:::\n\n\n#### R\n\nUse the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(openxlsx)\ndf1 <- openxlsx::read.xlsx(\"dataset1.xlsx\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas as pd\ndf1 = pd.read_excel('dataset1.xlsx')\n```\n````\n:::\n\n:::\n\n### Import CSV data\n\n::: panel-tabset\n#### Exercise 2\n\nRead the CSV data set **dataset1.csv** and store it into a data frame called **df2**.\n\n::: callout-tip\n-   Stata: use the import delimited Stata command with the `stata` function from the `RStata` package.\n-   R: use the [read.csv](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.table) function from the `haven` package.\n-   Python: use the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\ndf2 <- RStata::stata(\"import delimited dataset1.csv\",\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. import delimited dataset1.csv\n(11 vars, 32 obs)\n```\n:::\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf2 <- read.csv(\"dataset1.csv\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas as pd\ndf2 = pd.read_csv('dataset1.csv')\n```\n````\n:::\n\n:::\n\n### Import Stata data\n\n::: panel-tabset\n#### Exercise 3\n\nRead the Stata data set **dataset1.dta** and store it into a data frame called **df3**.\n\n::: callout-tip\n-   Stata: use the `use` Stata command with the `stata` function from the `RStata` package.\n-   R: use the [read_dta](https://haven.tidyverse.org/reference/read_dta.html) function from the `haven` package. This package supports SAS, STATA and SPSS software.\n-   Python: use the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\ndf3 <- RStata::stata(\"use dataset1.dta\",\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. use dataset1.dta\n```\n:::\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(haven)\ndf3 <- haven::read_dta(\"dataset1.dta\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas as pd\ndf3 = pd.read_stata('dataset1.dta')\n```\n````\n:::\n\n:::\n\n## Import data from URLs\n\nIndicate functions that accepts URL as well (it is the case for Python functions).\n\n## Import data from ODK Central\n\nWhile data digitally captured using ODK Collect or Enketo and stored in ODK Central can be retrieved in bulk through the web interface, ODK Central's API provides direct access to its data (and functionality). It is a more efficient way to ensure that data are always up-to-date.\n\nWe will see how to retrieve data through the OData API.\n\n::: panel-tabset\n\n### Exercise 4\n\nConnect to the ODK Central server data set (give access to a dummy ODK Central project for demo purpose).\n\"https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc\"\n\n::: callout-tip\n-   R: use the [ru_setup](https://docs.ropensci.org/ruODK/reference/ru_setup.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n### Solution\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nruODK::ru_setup(\n  svc = \"https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc\",\n  un = \"my.email.address@getodk.org\",\n  pw = \"my.super.secure.password\",\n  verbose = TRUE\n)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n<ruODK settings>\n  Default ODK Central Project ID: 7 \n  Default ODK Central Form ID: simple \n  Default ODK Central URL: https://private-anon-24fcfe2426-odkcentral.apiary-mock.com \n  Default ODK Central Username: my.email.address@getodk.org \n  Default ODK Central Password: run ruODK::get_default_pw() to show \n  Default ODK Central Passphrase: run ruODK::get_default_pp() to show \n  Default Time Zone: UTC \n  Default ODK Central Version: 1.1 \n  Default HTTP GET retries: 3 \n  Verbose messages: TRUE \n  Test ODK Central Project ID:  \n  Test ODK Central Form ID:  \n  Test ODK Central Form ID (ZIP tests):  \n  Test ODK Central Form ID (Attachment tests):  \n  Test ODK Central Form ID (Parsing tests):  \n  Test ODK Central Form ID (WKT tests):  \n  Test ODK Central URL:  \n  Test ODK Central Username:  \n  Test ODK Central Password: run ruODK::get_test_pw() to show \n  Test ODK Central Passphrase: run ruODK::get_test_pp() to show \n  Test ODK Central Version: 1.1 \n```\n:::\n:::\n\n\n:::\n\n::: panel-tabset\n\n### Exercise 5\n\nRetrieve data from form and store the data set into a data frame called df4\n\n::: callout-tip\n-   R: use the [odata_submission_get](https://docs.ropensci.org/ruODK/reference/odata_submission_get.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n### Solution\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- ruODK::odata_service_get()\nfq_form_schema <- ruODK::form_schema()\n```\n````\n\n::: {.cell-output .cell-output-stderr}\n```\ni Form schema v1.1\n```\n:::\n\n````{.cell-code}\n```{{r}}\ndf\nfq_form_schema\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 x 3\n# ... with 3 variables: name <chr>, kind <chr>, url <chr>\n# A tibble: 5 x 5\n  name       path             type      binary ruodk_name      \n  <chr>      <chr>            <chr>     <lgl>  <chr>           \n1 meta       /meta            structure NA     meta            \n2 instanceID /meta/instanceID string    NA     meta_instance_id\n3 name       /name            string    NA     name            \n4 age        /age             int       NA     age             \n5 photo      /photo           binary    TRUE   photo           \n```\n:::\n:::\n\n\n:::\n\n::: callout-important\nFor advanced users: encrypted data can only be retrieved through the RESTful API.\n:::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}