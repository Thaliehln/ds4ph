{
  "hash": "3c90aed0c5487928c620de8173c72166",
  "result": {
    "markdown": "---\ntitle: \"Import external data\"\n---\n\n\n## Introduction\n\nMost of the time you will want to generate *Quarto* documents using your own data. To this aim, you will have to import data from external sources: files, URLs, or server data (e.g., ODK Central data). If you want to further process / analyse your data, you will have to store the imported data in a data frame.\n\n::: callout-important\nRemember that you can:\n\n* store multiple data sets in memory (stored in different data frames `df1`, `df2`, `df3`, etc),\n* work on all of these data sets in parallel.\n:::\n\n## Import data from files\n\nThere is a dedicated importing function in R and Python for almost every data format. In this section we show you how to import Stata (`.dta`), Excel (`.xlsx`) and comma-separated values (CSV, `.csv`) formats.\n\nAll these functions only require as input the path where the file you want to import is stored. This path has to be passed as a  sequence of characters (*character*) within double or single quotes. \n\nThe path can be relative to your Quarto document (\"./data/mydata.csv\") or absolute (C:. \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nrelative_path <- \"./data/mydata.csv\"\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nabsolute_path <- \"C:/Users/myuser/Documents/mydata.csv\"\n```\n````\n:::\n\n\nFunctions in general have additional optional arguments\n\n### Import Excel data\n\n::: panel-tabset\n\n#### Exercise 1\n\nImport the Excel data set **dataset1.xlsx** and store it into a data frame called **df1**.\n\n::: callout-tip\n-   Stata: use the [import excel](https://www.stata.com/manuals/dimportexcel.pdf) Stata command with the [stata](https://rdrr.io/github/lbraglia/RStata/man/stata.html) function from the `RStata` package.\n-   R: use the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n-   Python: use the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\nUse the [import excel](https://www.stata.com/manuals/dimportexcel.pdf) Stata command with the [stata](https://rdrr.io/github/lbraglia/RStata/man/stata.html) function from the `RStata` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\n\ndf1 <- RStata::stata(\"import excel ./data/dataset1.xlsx\",\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. import excel ./data/dataset1.xlsx\n(5 vars, 151 obs)\n```\n:::\n:::\n\n\n#### R\n\nUse the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(openxlsx)\n\ndf1 <- openxlsx::read.xlsx(\"./data/dataset1.xlsx\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas\n\ndf1 = pandas.read_excel('./data/dataset1.xlsx')\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\openpyxl\\styles\\stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n  warn(\"Workbook contains no default style, apply openpyxl's default\")\n```\n:::\n:::\n\n:::\n\n### Import CSV data\n\n::: panel-tabset\n\n#### Exercise 2\n\nRead the CSV data set **dataset1.csv** and store it into a data frame called **df2**.\n\n::: callout-tip\n-   Stata: use the import delimited Stata command with the [stata](https://rdrr.io/github/lbraglia/RStata/man/stata.html) function from the `RStata` package.\n-   R: use the [read.csv](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.table) function from the `haven` package.\n-   Python: use the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\n\ndf2 <- RStata::stata(\"import delimited ./data/dataset1.csv\",\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. import delimited ./data/dataset1.csv\n(11 vars, 32 obs)\n```\n:::\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf2 <- read.csv(\"./data/dataset1.csv\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas\n\ndf2 = pandas.read_csv('./data/dataset1.csv')\n```\n````\n:::\n\n:::\n\n### Import Stata data\n\n::: panel-tabset\n#### Exercise 3\n\nRead the Stata data set **dataset1.dta** and store it into a data frame called **df3**.\n\n::: callout-tip\n-   Stata: use the `use` Stata command with the [stata](https://rdrr.io/github/lbraglia/RStata/man/stata.html) function from the `RStata` package.\n-   R: use the [read_dta](https://haven.tidyverse.org/reference/read_dta.html) function from the `haven` package. This package supports SAS, STATA and SPSS software.\n-   Python: use the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\n\ndf3 <- RStata::stata(\"use ./data/dataset1.dta\",\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. use ./data/dataset1.dta\n```\n:::\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(haven)\n\ndf3 <- haven::read_dta(\"./data/dataset1.dta\")\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas\n\ndf3 = pandas.read_stata('./data/dataset1.dta')\n```\n````\n:::\n\n:::\n\n## Import data from URLs\n\nIndicate functions that accepts URL as well (it is the case for all Python functions).\n\n::: panel-tabset\n#### Exercise 4\n\nImport the CSV data set that contains a comprehensive spatial inventory of 98,745 public health facilities in Sub Saharan Africa from the following  [url](http://hfrportal.moh.go.tz/index.php?r=facilities/exportToExcel&url=https%3A%2F%2Fresourcemap.instedd.org%2Fapi%2Fcollections%2F409.json%3Fpage%3Dall%26box%3D-180%2C-90%2C179.99%2C90%26Admin_div%5Bunder%5D%3DTZ%26human%3Dtrue&report_title=List_of_Facilities_with_Geo) and store it into a data frame called **df4**.\n\nTo learn more about how this data set was assembled, please refer to [@maina_spatial_2019]\n\n::: callout-tip\n-   Stata: use the import excel Stata command with the `stata` function from the `RStata` package.\n-   R: use the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n-   Python: use the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package. In the latest version of pandas (0.19.2) you can directly pass the url\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### Stata\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(RStata)\n\ndf2 <- RStata::stata('import delimited \"https://open.africa/dataset/d7335980-29d5-476c-bf7a-feb4e22cf631/resource/e2432e8a-cf15-4a8b-b8c3-567f443c1459/download/cfa-data-hospitals-in-africa-00-ssa-mfl-130219.xlsx-ssa-mfl.csv\"',\n                     data.out = TRUE)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n. import delimited \"https://open.africa/dataset/d7335980-29d5-476c-bf7a-feb4e22\n> cf631/resource/e2432e8a-cf15-4a8b-b8c3-567f443c1459/download/cfa-data-hospita\n> ls-in-africa-00-ssa-mfl-130219.xlsx-ssa-mfl.csv\"\n(7 vars, 98,745 obs)\n```\n:::\n:::\n\n\n#### R\n\nUse the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ncsv_url <- \"https://open.africa/dataset/d7335980-29d5-476c-bf7a-feb4e22cf631/resource/e2432e8a-cf15-4a8b-b8c3-567f443c1459/download/cfa-data-hospitals-in-africa-00-ssa-mfl-130219.xlsx-ssa-mfl.csv\"\ndf4 <- read.csv(csv_url)\n```\n````\n:::\n\n\n#### Python\n\nUse the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport pandas\n\ncsv_url = \"https://open.africa/dataset/d7335980-29d5-476c-bf7a-feb4e22cf631/resource/e2432e8a-cf15-4a8b-b8c3-567f443c1459/download/cfa-data-hospitals-in-africa-00-ssa-mfl-130219.xlsx-ssa-mfl.csv\"\ndf1 = pandas.read_csv(csv_url)\n```\n````\n:::\n\n:::\n\n## Import data from ODK Central\n\nWhile data digitally captured using ODK Collect or Enketo and stored in ODK Central can be retrieved in bulk through the web interface, ODK Central's API provides direct access to its data (and functionality). It is a more efficient way to ensure that data are always up-to-date.\n\nWe will see how to retrieve data through the OData API.\n\n::: panel-tabset\n\n### Exercise 5\n\nConnect to the ODK Central server data set.\n\"https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc\"\n\nYour email is \"my.email.address@getodk.org\" and your password is \"my.super.secure.password\".\n\n::: callout-tip\n-   R: use the [ru_setup](https://docs.ropensci.org/ruODK/reference/ru_setup.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n### Solution\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nruODK::ru_setup(\n  svc = \"https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc\",\n  un = \"my.email.address@getodk.org\",\n  pw = \"my.super.secure.password\",\n  verbose = TRUE\n)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n<ruODK settings>\n  Default ODK Central Project ID: 7 \n  Default ODK Central Form ID: simple \n  Default ODK Central URL: https://private-anon-24fcfe2426-odkcentral.apiary-mock.com \n  Default ODK Central Username: my.email.address@getodk.org \n  Default ODK Central Password: run ruODK::get_default_pw() to show \n  Default ODK Central Passphrase: run ruODK::get_default_pp() to show \n  Default Time Zone: UTC \n  Default ODK Central Version: 1.1 \n  Default HTTP GET retries: 3 \n  Verbose messages: TRUE \n  Test ODK Central Project ID:  \n  Test ODK Central Form ID:  \n  Test ODK Central Form ID (ZIP tests):  \n  Test ODK Central Form ID (Attachment tests):  \n  Test ODK Central Form ID (Parsing tests):  \n  Test ODK Central Form ID (WKT tests):  \n  Test ODK Central URL:  \n  Test ODK Central Username:  \n  Test ODK Central Password: run ruODK::get_test_pw() to show \n  Test ODK Central Passphrase: run ruODK::get_test_pp() to show \n  Test ODK Central Version: 1.1 \n```\n:::\n:::\n\n\n:::\n\n::: panel-tabset\n\n### Exercise 6\n\nRetrieve data from form and store the data set into a data frame called df4\n\n::: callout-tip\n-   R: use the [odata_submission_get](https://docs.ropensci.org/ruODK/reference/odata_submission_get.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n### Solution\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nfq_form_schema <- ruODK::form_schema()\n```\n````\n\n::: {.cell-output .cell-output-stderr}\n```\ni Form schema v1.1\n```\n:::\n\n````{.cell-code}\n```{{r}}\nfq_form_schema\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 5\n  name       path             type      binary ruodk_name      \n  <chr>      <chr>            <chr>     <lgl>  <chr>           \n1 meta       /meta            structure NA     meta            \n2 instanceID /meta/instanceID string    NA     meta_instance_id\n3 name       /name            string    NA     name            \n4 age        /age             int       NA     age             \n5 photo      /photo           binary    TRUE   photo           \n```\n:::\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- ruODK::odata_service_get()\ndf\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 x 3\n# ... with 3 variables: name <chr>, kind <chr>, url <chr>\n```\n:::\n:::\n\n\n:::\n\n::: callout-important\nEncrypted data can only be retrieved using the RESTful API and cannot be retrieved using the oData API. ODK Central supports two modes of encryption - learn about them here. ruODK supports project managed encryption, however the support is limited to exactly one encryption key. The supplied passphrase will be used against the first returned encryption key. Remaining encryption keys are ignored by ruODK.\n\nIf an incorrect passphrase is given, the request is terminated immediately. It has been reported that multiple requests with incorrect passphrases can crash ODK Central.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- ruODK::submission_export()\n```\n````\n\n::: {.cell-output .cell-output-stderr}\n```\n<U+2714> Overwriting previous download: \"C:/Users/langhe/switchdrive/Private/Code/R/github/ds4ph/book/simple.zip\"\n```\n:::\n\n````{.cell-code}\n```{{r}}\ndf\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nC:/Users/langhe/switchdrive/Private/Code/R/github/ds4ph/book/simple.zip\n```\n:::\n:::\n\n\n:::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}