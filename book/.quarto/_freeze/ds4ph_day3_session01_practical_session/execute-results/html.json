{
  "hash": "aed03d78c713e5557dcccf1e59cb8ae1",
  "result": {
    "markdown": "---\ntitle: \":orange_book: Practical\"\nwarning: false\n---\n\n\n## Introduction\n\n### Overview\n\nThis tutorial is adapted from the excellent [Machine learning in Python with scikit-learn](https://www.fun-mooc.fr/en/courses/machine-learning-python-scikit-learn/)\n\n### Learning objectives\n\n-   explore data\n-   prepare data\n-   fit a **k-nearest neighbors** model on a training dataset\n-   evaluate its generalization performance on the testing data\n\n## Question\n\nWe are interested in predicting the age of the child based on height and weight measured during the consultation.\n\n-   **MEAS_weight_in_kg** and\n-   **MEAS_height_in_cm**.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(tidyverse) # includes dplyr and tibble\nlibrary(skimr)\nlibrary(ggplot2)\nlibrary(DataExplorer)\nlibrary(reticulate)\n```\n````\n:::\n\n\n## Load the data\n\nThe dataset is stored in **dataset4.xlsx**.\n\nRead the dataset and store it into a dataframe called **df**.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- openxlsx::read.xlsx(\"./data/dataset4.xlsx\")\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- df %>%\n  dplyr::mutate(\n    SDC_age_category = dplyr::case_when(\n      SDC_age_in_months < 12 ~ \"<11 months\",\n      SDC_age_in_months >= 12 & SDC_age_in_months < 36 ~ \"12-35 months\",\n      SDC_age_in_months >= 36 & SDC_age_in_months < 60 ~ \"36-59 months\",\n      TRUE ~ \"\"\n    )\n  ) %>%\n  tibble::remove_rownames() %>%\n  tibble::column_to_rownames(var=\"child_ID\") %>%\n  dplyr::mutate(across(c(SDC_sex,\n                         SDC_age_category), factor))\n```\n````\n:::\n\n\n## Data exploration\n\nWe want to do some data exploration to get an initial understanding of the data. Before building a predictive model, it is always a good idea to look at the data:\n\n-   maybe the task you are trying to achieve can be solved without machine learning;\n-   you need to check that the information you need for your task is actually present in the dataset;\n-   inspecting the data is a good way to find peculiarities. These can arise during data collection (for example, malfunctioning sensor or missing values), or from the way the data is processed afterwards (for example capped values).\n\n### Data structure\n\n::: panel-tabset\n#### :pencil2: Exercise 1\n\nExamine the structure of the data, including variable names, labels.\n\n1.  How many features are numerical?\n2.  How many features are categorical?\n\nDisplay the variables/features **child_id**, **MEAS_weight_in_kg** and **MEAS_height_in_cm** for the **10 first samples** in the data.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf %>%\n  skimr::skim()\n```\n````\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |2003       |\n|Number of columns        |5          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|factor                   |2          |\n|numeric                  |3          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: factor**\n\n|skim_variable    | n_missing| complete_rate|ordered | n_unique|top_counts                   |\n|:----------------|---------:|-------------:|:-------|--------:|:----------------------------|\n|SDC_sex          |         0|             1|FALSE   |        2|1: 1037, 2: 966              |\n|SDC_age_category |         0|             1|FALSE   |        3|12-: 901, <11: 780, 36-: 322 |\n\n\n**Variable type: numeric**\n\n|skim_variable     | n_missing| complete_rate|  mean|    sd| p0| p25| p50| p75|  p100|hist                                     |\n|:-----------------|---------:|-------------:|-----:|-----:|--:|---:|---:|---:|-----:|:----------------------------------------|\n|MEAS_weight_in_kg |         0|          1.00| 10.25|  3.40|  2|   8|  10|  12|  38.2|▆▇▁▁▁ |\n|MEAS_height_in_cm |      1680|          0.16| 75.61| 17.42| 10|  65|  77|  89| 109.0|▁▁▆▇▅ |\n|SDC_age_in_months |         0|          1.00| 19.41| 14.76|  0|   8|  16|  29|  59.0|▇▆▃▂▁ |\n:::\n:::\n\n\n:::\n\nNumerical variables can be naturally handled by machine learning algorithms that are typically composed of a sequence of arithmetic instructions such as additions and multiplications.\n\n### Data preparation\n\n#### Missing data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nDataExplorer::plot_missing(df,\n                           geom_label_args = list(size = 2, label.padding = unit(0.2, \"lines\")))\n```\n````\n\n::: {.cell-output-display}\n![](ds4ph_day3_session01_practical_session_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n#### Encoding of categorical data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex_df <- df %>%\n  dplyr::select(SDC_sex)\n```\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nfrom sklearn.preprocessing import OneHotEncoder\n\nencoder = OneHotEncoder(sparse = False)\nsex_encoded = encoder.fit_transform(r.sex_df)\n```\n````\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- cbind(df,\n            data.frame(py$sex_encoded)) %>% \n  dplyr::rename(sex_male = X1,\n                sex_female = X2)\ndf %>%\n  head(10) %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|     | MEAS_weight_in_kg| MEAS_height_in_cm|SDC_sex | SDC_age_in_months|SDC_age_category | sex_male| sex_female|\n|:----|-----------------:|-----------------:|:-------|-----------------:|:----------------|--------:|----------:|\n|150  |                 3|                NA|1       |                 1|<11 months       |        1|          0|\n|162  |                14|                NA|1       |                36|36-59 months     |        1|          0|\n|1177 |                 3|                NA|2       |                 0|<11 months       |        0|          1|\n|1245 |                 8|                NA|2       |                19|12-35 months     |        0|          1|\n|1262 |                16|                NA|2       |                55|36-59 months     |        0|          1|\n|1264 |                 9|                NA|1       |                 7|<11 months       |        1|          0|\n|1265 |                 9|                NA|1       |                21|12-35 months     |        1|          0|\n|1266 |                 8|                NA|1       |                 6|<11 months       |        1|          0|\n|1268 |                10|                NA|1       |                13|12-35 months     |        1|          0|\n|1269 |                13|                NA|1       |                49|36-59 months     |        1|          0|\n:::\n:::\n\n\n### Target classes\n\n::: panel-tabset\n#### :pencil2: Exercise 2\n\nWhat are the different age categories available in the dataset and how many observations/samples of each types are there?\n\n::: callout-tip\n-   R: use `table`\n-   Python: select the right column and use the `value_counts` method.\n:::\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ntable(df$SDC_age_category)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  <11 months 12-35 months 36-59 months \n         780          901          322 \n```\n:::\n:::\n\n:::\n\n### Feature distribution\n\n::: panel-tabset\n#### :pencil2: Exercise 3\n\nLet us now look at the distribution of individual features, to get more insights about the data.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\n#### R\n\nWe can start by plotting histograms, note that this only works for features containing numerical values\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf %>%  ggplot2::ggplot(aes(x = MEAS_height_in_cm,\n                            fill = SDC_age_category)) +\n  geom_histogram(binwidth = 2, alpha = 0.5, position = \"identity\") +\n  theme_minimal()\n```\n````\n\n::: {.cell-output-display}\n![](ds4ph_day3_session01_practical_session_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf %>%  ggplot2::ggplot(aes(x = MEAS_weight_in_kg,\n                            fill = SDC_age_category)) +\n  geom_histogram(binwidth = 1, alpha = 0.5, position = \"identity\") +\n  theme_minimal()\n```\n````\n\n::: {.cell-output-display}\n![](ds4ph_day3_session01_practical_session_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nimport seaborn\nimport matplotlib.pyplot\npairplot_figure = seaborn.pairplot(r.df, hue = \"SDC_age_category\")\nmatplotlib.pyplot.show()\n```\n````\n\n::: {.cell-output-display}\n![](ds4ph_day3_session01_practical_session_files/figure-html/unnamed-chunk-15-1.png){width=1340}\n:::\n:::\n\n\n:::\n\n::: panel-tabset\n### :pencil2: Exercise 3\n\nShow variable/feature distribution for each age category.\n\nLooking at these distributions, how hard do you think it will be to classify the age category only using height and weight?\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n\nLooking at the previous scatter-plot showing height and weight, the age categories are reasonably well separated.\n\nThere is some small overlap between the age categories, so we can expect a statistical model to perform well on this dataset but not perfectly.\n\n### R\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Write your code here\n```\n````\n:::\n\n:::\n\n## Train-test data split\n\nWhen building a machine learning model, it is important to evaluate the trained model on data that was not used to fit it, as generalization is more than memorization (meaning we want a rule that generalizes to new data, without evaluating on data we memorized). The data used to fit a model is called **training** data.\n\nCorrect evaluation is easily done by leaving out a subset of the data when training the model and using it afterwards for model evaluation. The data used to assess a model is called **testing** data.\n\n### Remove missing data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf <- df[!is.na(df$MEAS_height_in_cm), ]\ndf %>% \n  head(5) %>% \n  knitr::kable()\n```\n````\n\n::: {.cell-output-display}\n|     | MEAS_weight_in_kg| MEAS_height_in_cm|SDC_sex | SDC_age_in_months|SDC_age_category | sex_male| sex_female|\n|:----|-----------------:|-----------------:|:-------|-----------------:|:----------------|--------:|----------:|\n|5014 |              11.9|                96|1       |                46|36-59 months     |        1|          0|\n|5035 |               9.0|                77|2       |                 9|<11 months       |        0|          1|\n|5037 |               6.0|                65|2       |                 6|<11 months       |        0|          1|\n|5058 |              10.0|                75|1       |                17|12-35 months     |        1|          0|\n|7499 |               6.0|                32|2       |                18|12-35 months     |        0|          1|\n:::\n:::\n\n\n### Generate the training / test sampling\n\nUse a seed to make the sampling reproducible (i.e. the same sampling will be generated each time we run this code)\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nset.seed(1)\n```\n````\n:::\n\n\nCreate ID column\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ndf$id <- 1:nrow(df)\n```\n````\n:::\n\n\nUse 70% of dataset as training set and 30% as test set \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ntrain_df <- df %>%\n  dplyr::sample_frac(0.70)\ntest_df  <- dplyr::anti_join(df,\n                             train_df,\n                             by = 'id')\n```\n````\n:::\n\n\n### Separate the data and the target\n\nCreate the target.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ntrain_target <- train_df[\"SDC_age_category\"] \ntest_target <- test_df[\"SDC_age_category\"] \n```\n````\n:::\n\n\nRemove the target from the training and test dataset to create the data matrix.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ntrain_data_matrix <- train_df %>%\n  dplyr::select(-SDC_age_category,\n                -SDC_age_in_months)\ntest_data_matrix <- test_df %>%\n  dplyr::select(-SDC_age_category,\n                -SDC_age_in_months)\n```\n````\n:::\n\n\n## Train the classifier\n\nLet us now use a nearest neighbour approach for learning the target from the training data matrix of weights and heights. The principle behind [**nearest neighbor methods**](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.neighbors \"sklearn.neighbors\") is to find a predefined number of training samples closest in distance to the new point, and predict the label from these.\n\nDespite its simplicity, nearest neighbors has been successful in a large number of classification and regression problems. Supervised neighbors-based learning comes in two flavors:\n* [classification](https://scikit-learn.org/stable/modules/neighbors.html#classification) for data with discrete labels\n* [regression](https://scikit-learn.org/stable/modules/neighbors.html#regression) for data with continuous labels.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier()\n_ = model.fit(r.train_data_matrix, r.train_target.values.ravel())\n```\n````\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n## Evaluate the performance of the classifier\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{python}}\ntarget_predicted = model.predict(r.test_data_matrix)\n```\n````\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\nConfusion matrix\n\n\n::: {.cell df-print='kable'}\n\n````{.cell-code}\n```{{r}}\n#| df-print: kable\ncombined <- cbind(test_target, py$target_predicted)\ncolnames(combined) <- c(\"target\", \"prediction\") \ncombined <- combined %>% \n  dplyr::mutate(correct = 1 * (target == prediction))\ncombined %>%  head(5)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n           target   prediction correct\n5035   <11 months 12-35 months       0\n5037   <11 months 12-35 months       0\n7499 12-35 months   <11 months       0\n7994 36-59 months 12-35 months       0\n7995 36-59 months 12-35 months       0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nperf <- mean(combined$correct)\n```\n:::\n\n\nNumber of correct prediction: 0.7216495\n\n\n::: {.cell}\n\n```{.python .cell-code}\naccuracy = model.score(r.test_data_matrix, r.test_target)\n```\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>\n```\n:::\n\n```{.python .cell-code}\nmodel_name = model.__class__.__name__\n```\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>\n```\n:::\n:::\n\nThe test accuracy using a KNeighborsClassifier is 0.7216495.\n\n:::callout-important\nThe score of a model will in general depend on the way we make the training / test split. \n\n* One downside of doing a single split is that it does not give any information about this variability.\n* Another downside, in a setting where the amount of data is small, is that the data available for training and testing will be even smaller after splitting.\n:::\n\n## Estimators\n\n![Scikit-learn navigation map: what machine learning estimators for what data problem](https://scikit-learn.org/stable/_static/ml_map.png){alt=\"Scikit-learn map of machine learning estimators\"}\n",
    "supporting": [
      "ds4ph_day3_session01_practical_session_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}