{
  "hash": "02a14562dab82f41b3b1fbed4053855c",
  "result": {
    "markdown": "---\ntitle: \"Manipulate data\"\n---\n\n\n## Introduction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'reticulate' wurde unter R Version 4.1.3 erstellt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\n## Import data from files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RStata)\ndf1 <- RStata::stata(\"import excel dataset1.xlsx\",\n                     data.out = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. import excel dataset1.xlsx\n(5 vars, 151 obs)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\ndf2 = pd.read_csv('dataset1.csv')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\ndf3 <- haven::read_dta(\"dataset1.dta\")\n```\n:::\n\n\n::: {.panel-tabset}\n\n#### Exercise 4\n\nCan you indicate what variable has been modified in **dataset1** between df1 and df2?\n\n::: callout-tip\nUse the R function **comparedf**\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here\n```\n:::\n\n\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\narsenal::comparedf(df1, py$df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompare Object\n\nFunction Call: \narsenal::comparedf(x = df1, y = py$df2)\n\nShared: 0 non-by variables and 32 observations.\nNot shared: 16 variables and 119 observations.\n\nDifferences found in 0/0 variables compared.\n0 variables compared have non-identical attributes.\n```\n:::\n:::\n\n\n:::\n\n## Import data from URLs\n\nIndicate functions that accepts URL as well (it is the case for Python functions).\n\n# Import data from ODK Central\n\nWhile data digitally captured using ODK Collect or Enketo and stored in ODK Central can be retrieved in bulk through the web interface, ODK Central's API provides direct access to its data (and functionality). It is a more efficient way to ensure that data are always up-to-date.\n\nWe will see how to retrieve data through the OData API.\n\n1.  Connect to the ODK Central server data set (give access to a dummy ODK Central project for demo purpose).\n\n::: callout-tip\n-   R: use the [ru_setup](https://docs.ropensci.org/ruODK/reference/ru_setup.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ruODK::ru_setup(\n#   svc = Sys.getenv(\"ODKC_SVC\"),\n#   un = Sys.getenv(\"ODKC_UN\"),\n#   pw = Sys.getenv(\"ODKC_PW\"),\n#   tz = Sys.getenv(\"TZ\"),\n#   verbose = FALSE \n# )\n```\n:::\n\n\n2.  Retrieve data from form and store the data set into a data frame called df4\n\n::: callout-tip\n-   R: use the [odata_submission_get](https://docs.ropensci.org/ruODK/reference/odata_submission_get.html) function from the `ruODK` package [@mayer20].\n-   Python: use functions from the `pyODK` package.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here\n```\n:::\n\n\n::: callout-important\nFor advanced users: encrypted data can only be retrieved through the RESTful API.\n:::\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}