---
title: ":blue_book: Manipulate data"
---

## Introduction

::: callout-important
Remember that with Quarto you can store multiple data sets in memory (stored in different data frames `df1`, `df2`, `df3`, etc) and work in parallel on all these data sets.
:::

## Type of data

## Descriptive statistics

Package `gtsummary`

```{{r}}
install.packages("gtsummary")
```

## Visualise data

## Manipulate Python and R data

::: {.panel-tabset}

#### :pencil2: Exercise 1

1. Import **dataset1.xlsx** using Stata and store it in `df1`

```{r}
#| echo: fenced
# Write your code here
```

2. Import **dataset1.csv** using Python and store it in `df2`

```{python}
#| echo: fenced
# Write your code here
```

3. Compare `df1`and `df2`. Can you indicate what variable has been modified in **dataset1** between df1 and df2?

::: callout-tip
Use the R function **comparedf**
:::

```{r}
#| echo: fenced
# Write your code here
```

#### :eyes: Solution

1. Import **dataset1.xlsx** using Stata and store it in `df1`

```{r}
#| echo: fenced
library(RStata)
df1 <- RStata::stata("import excel ./data/dataset1a.xlsx",
                     data.out = TRUE)
```

2. Import **dataset1.csv** using Python and store it in `df2`

```{python}
#| include: false
import warnings
warnings.filterwarnings('ignore')
```

```{python}
#| echo: fenced
import pandas as pd
df2 = pd.read_csv('./data/dataset1b.csv')
```

3. Compare `df1`and `df2`.

```{r}
#| echo: fenced
library(reticulate)
arsenal::comparedf(df1, py$df2)
```
:::

## Explore data

Package `dplyr`

Pipes are a powerful tool for clearly expressing a sequence of multiple operations. So far, you’ve been using them without knowing how they work, or what the alternatives are. Now, in this chapter, it’s time to explore the pipe in more detail. You’ll learn the alternatives to the pipe, when you shouldn’t use the pipe, and some useful related tools.

## Descriptive summaries

Packages `skimr`and `gtsummary`

```{{r}}
install.packages("skimr")
```

```{{r}}
install.packages("gtsummary")
```

## Plot

Package `ggplot2`

```{{r}}
install.packages("ggplot2")
```

## Explore data

Package `DataExplorer`

```{{r}}
install.packages("DataExplorer")
```

```{r}
DataExplorer::plot_missing(df1)
```