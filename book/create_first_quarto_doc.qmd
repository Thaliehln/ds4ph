---
title: ":blue_book: Getting started with Quarto"
---

## Introduction

### Overview

Please review the following sections for instructions on installation steps:

-   Downloading Quarto (@sec-Quarto-installation)
-   Installing the rmarkdown package

### Learning objectives

1. Learn how to use Quarto

## Create a new Quarto document

While it makes sense to use Quarto going forward, there are still a lot of resources written for and in R Markdown. For this reason we provide the R Markdown equivalents for this section in Appendix.

In RStudio, you can create a new Quarto document by selecting **File** \> **New File** \> **Quarto Document...**

![](images/paste-A7DE8B60.png)

When you create a new Quarto document, RStudio tries to be helpful by allowing you to select a template which explains the different section of an R Markdown script. R Studio will enable you select options to pick from to generate a template Quarto document to start from.

The title and the author names are not important. If the output document type you want is not one of these, do not worry - you can just pick any one and change it later.

Let us select *HTML* to create an html document.

Click on create to open up a new Quarto (.Qmd) document.

![](images/paste-67B97E04.png)

## Visual Editor

The RStudio Visual Editor is quite new and has features that improve your writing experience. Working in the Visual Editor feels a bit like working in a Google Doc.

Here's an example showing the same file in the original Source Editor with content in markdown format and in the Visual Editor with content that looks more like it will appear in a live site. You can switch freely between these modes.

## Quarto document structure

An R Markdown document can be edited in RStudio.

There are three basic components to a Quarto document, similar to the components of a R Markdown document:

-   metadata (YAML header)
-   text (markdown formatting)
-   code (R code formatting)

![](images/paste-30C30ECC.png)

::: panel-tabset
### YAML header

The very top of the document consists of a (YAML) header surrounded by --- lines. Here you may want to edit the title of your document. The other settings in the header define the default document type produced (Microsoft Word) when the RMarkdown is "knit". the information intended to produce an html output.

### Text

In WHITE background areas, any text will appear as regular text in the final report. Can have formatting such as headings, italics, bold, numbers, and bullets. See the second page of this RMarkdown cheatsheet for more detail. Can display parameters derived from your data via in-line code (such as epi week of the outbreak peak, as in the example above).

### Code chunks

In gray background "code chunks", RMarkdown is running R commands. These commands perform data processing and cleaning steps, or could produce visual outputs in the document.
:::

## Quarto render

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.

![](images/paste-A8386DC4.png) \## Code options

You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).


## Multilanguage

As the number of programming languages used for scientific discourse is very broad, Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia. building on the RStudio (R) and Jupyter (Python, Julia) ecosystems which are very popular. Stata is not a language supported by Quarto.

## Create code chunks

To write and execute code in Quarto, you will use **code chunks**.

::: callout-tip

Here are some tips for creating code chunks in RStudio

* **Backticks**: use three backticks to start and end a code chunk.
* **Toolbar icon**: you can also start a code chunk by clicking the appropriate icon in the toolbar.
* **Keyboard shortcut**: for a quicker method, use the keyboard shortcut `Ctrl` + `Alt` + `I`

:::

## Write R code chunks

In this section, we will see how to use and mix R, Stata and Python within Quarto so that you can make the most out of it.

::: callout-note
A **data frame** is a two-dimensional array-like structure that contains rows and columns.
:::

To store the content of the *iris* dataset into a data frame named `df`, you can use `=` (*equal*) but good practice recommend using `<-` (*back arrow*) to indicate the direction of your allocation.

```{r}
#| echo: fenced
df <- iris
```

How to display data

```{r}
#| echo: fenced
#| df-print: kable
library(dplyr)
knitr::kable(head(df, 10))
```

The pipe operator

```{r}
#| echo: fenced
#| df-print: kable
library(dplyr)
df %>%
  head(10) %>%
  knitr::kable()
```

You can cross-reference your table @tbl-iris

```{r}
#| label: tbl-iris
#| tbl-cap: Iris data set
#| echo: fenced
#| df-print: kable
df %>% 
  knitr::kable()
```

## References

-   The Epidemiologist R Handbook (https://epirhandbook.com)
