---
title: "Import external data"
---

## Introduction

Most of the time you will want to generate *Quarto* documents using your own data. To this aim, you will have to import data from external sources: files, URLs, or server data (e.g., ODK Central data).

If you want to further process / analyse your data, you will have to store the imported data in a data frame.

You can store multiple data sets in memory (which will be stored in different data frames) and work on all of them in parallel.

```{r}
library(reticulate)
```

```{python}
#| include: false
import warnings
warnings.filterwarnings('ignore')
```

## Import data from files

There is a dedicated importing function in R and Python for almost every data format. In this session we show you how to read Stata (`.dta`), Excel (`.xlsx`) and comma-separated values (CSV, `.csv`) formats.

Only one argument is required within these function. We need to know the PATH where the file is stored.

### Import Excel data

::: panel-tabset
#### Exercise 1

Read the Excel data set **dataset1.xlsx** and store it into a data frame called **df1**.

::: callout-tip
-   Stata: use the import excel Stata command with the `stata` function from the `RStata` package.
-   R: use the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.
-   Python: use the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.
:::

```{r}
# Write your code here
```

#### Stata

```{r}
library(RStata)
df1 <- RStata::stata("import excel dataset1.xlsx",
                     data.out = TRUE)
```

#### R

Use the [read.xlsx](https://www.rdocumentation.org/packages/openxlsx/versions/4.2.5/topics/read.xlsx) function from the `openxlsx` package.

```{r}
#| echo: fenced
library(openxlsx)
df1 <- openxlsx::read.xlsx("dataset1.xlsx")
```

#### Python

Use the [read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function from the `pandas` package.

```{python}
#| echo: fenced
import pandas as pd
df1 = pd.read_excel('dataset1.xlsx')
```
:::

### Import CSV data

::: panel-tabset
#### Exercise 2

Read the CSV data set **dataset1.csv** and store it into a data frame called **df2**.

::: callout-tip
-   Stata: use the import delimited Stata command with the `stata` function from the `RStata` package.
-   R: use the [read.csv](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.table) function from the `haven` package.
-   Python: use the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.
:::

```{r}
#| echo: fenced
# Write your code here
```

#### Stata

```{r}
#| echo: fenced
library(RStata)
df2 <- RStata::stata("import delimited dataset1.csv",
                     data.out = TRUE)
```

#### R

```{r}
#| echo: fenced
df2 <- read.csv("dataset1.csv")
```

#### Python

Use the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.

```{python}
#| echo: fenced
import pandas as pd
df2 = pd.read_csv('dataset1.csv')
```
:::

### Import Stata data

::: panel-tabset
#### Exercise 3

Read the Stata data set **dataset1.dta** and store it into a data frame called **df3**.

::: callout-tip
-   Stata: use the `use` Stata command with the `stata` function from the `RStata` package.
-   R: use the [read_dta](https://haven.tidyverse.org/reference/read_dta.html) function from the `haven` package. This package supports SAS, STATA and SPSS software.
-   Python: use the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.
:::

```{r}
#| echo: fenced
# Write your code here
```

#### Stata

```{r}
#| echo: fenced
library(RStata)
df3 <- RStata::stata("use dataset1.dta",
                     data.out = TRUE)
```

#### R

```{r}
#| echo: fenced
library(haven)
df3 <- haven::read_dta("dataset1.dta")
```

#### Python

Use the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.

```{python}
#| echo: fenced
import pandas as pd
df3 = pd.read_stata('dataset1.dta')
```
:::

## Import data from URLs

Indicate functions that accepts URL as well (it is the case for Python functions).

## Import data from ODK Central

While data digitally captured using ODK Collect or Enketo and stored in ODK Central can be retrieved in bulk through the web interface, ODK Central's API provides direct access to its data (and functionality). It is a more efficient way to ensure that data are always up-to-date.

We will see how to retrieve data through the OData API.

::: panel-tabset

### Exercise 4

Connect to the ODK Central server data set (give access to a dummy ODK Central project for demo purpose).
"https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc"

::: callout-tip
-   R: use the [ru_setup](https://docs.ropensci.org/ruODK/reference/ru_setup.html) function from the `ruODK` package [@mayer20].
-   Python: use functions from the `pyODK` package.
:::

```{r}
#| echo: fenced
# Write your code here
```

### Solution

```{r}
#| echo: fenced
ruODK::ru_setup(
  svc = "https://private-anon-24fcfe2426-odkcentral.apiary-mock.com/v1/projects/7/forms/simple.svc",
  un = "my.email.address@getodk.org",
  pw = "my.super.secure.password",
  verbose = TRUE
)
```

:::

::: panel-tabset

### Exercise 5

Retrieve data from form and store the data set into a data frame called df4

::: callout-tip
-   R: use the [odata_submission_get](https://docs.ropensci.org/ruODK/reference/odata_submission_get.html) function from the `ruODK` package [@mayer20].
-   Python: use functions from the `pyODK` package.
:::

```{r}
#| echo: fenced
# Write your code here
```

### Solution

```{r}
#| echo: fenced
df <- ruODK::odata_service_get()
fq_form_schema <- ruODK::form_schema()
df
fq_form_schema
```

:::

::: callout-important
For advanced users: encrypted data can only be retrieved through the RESTful API.
:::

## References
