---
title: "Data Science for Public Health Workshop"
subtitle: "Day 01 - Session 01 - Import data"
institute: "Ifakara Health Institute / Swiss Tropical and Public Health Institute"
date: "2022-09-27"
format:
  revealjs:
    slide-number: true
    chalkboard: true
    html-q-tags: true
editor: visual
from: markdown+emoji
execute:
  echo: true
  warning: false
engine: knitr
bibliography: references.bib
---

## Introduction

Most of the time you will want to generate *Quarto* documents using your own data.

One of the first thing you will usually do when starting a new *Quarto* document is to import your data.

If you want to further process / analyse your data, you will have to store your data in a two-dimensional array-like structure (**data frame**) that contains rows and columns. You can store multiple data sets in memory (which will be stored in different data frames) and work on all of them in parallel.

::: callout-warning
For (advanced) Python users only: you need to import the R package `reticulate` if you want to use the Knitr engine and manipulate Python objects within R code chunks.

```{r}
library(reticulate)
```

```{python}
import warnings
warnings.filterwarnings('ignore')
```
:::

## Import data from files

There is a dedicated importing function in R and Python for almost every data format. In this session we show you how to read Stata (`.dta`), Excel (`.xlsx`) and comma-separated values (CSV, `.csv`) formats.

Only one argument is required within these function. We need to know the PATH where the file is stored.

Indicate functions that accepts URL as well (it is the case for Python functions).

### Import Excel data

Read the Excel data set **dataset1.xlsx** and store it into a data frame called **df1**.

::: callout-tip
-   R: use the [read_excel](https://readxl.tidyverse.org/reference/read_excel.html) function from the `readxl` package.
:::

```{r}
library(readxl)
df1 <- readxl::read_excel("dataset1.xlsx")
```

## Import CSV data

Read the CSV data set **dataset1.csv** and store it into a data frame called **df2**.

::: callout-tip
-   R: use the [read.csv](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.table) function from the `haven` package.
-   Python: use the [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function from the `pandas` package.
:::

```{r}
library(haven)
df2 <- read.csv("dataset1.csv")
```

## Import Stata data

Read the Stata data set **dataset1.dta** and store it into a data frame called **df3**.

::: callout-tip
-   R: use the [read_dta](https://haven.tidyverse.org/reference/read_dta.html) function from the `haven` package. This package supports SAS, STATA and SPSS software.
-   Python: use the [read_stata](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html) function from the `pandas` package.
:::

```{r}
#| echo: true
# Write your code here
```

```{r}
library(haven)
df3 <- haven::read_dta("dataset1.dta")
```

```{python}
import pandas as pd
df3 = pd.read_stata('dataset1.dta')
```

## Additional question

Can you indicate what variable has been modified in **dataset1** between df1 and df2?

::: callout-tip
Use the R function **comparedf**
:::

```{r}
#| echo: true
# Write your code here
```

```{r}
arsenal::comparedf(df1, df2)
```

Can you indicate what variable has been modified in **dataset1** between df1 and df3?

```{r}
#| echo: true
# Write your code here
```

```{r}
arsenal::comparedf(df1, py$df3)
```

# Import data from ODK Central

While data digitally captured using ODK Collect or Enketo and stored in ODK Central can be retrieved in bulk through the web interface, ODK Central's API provides direct access to its data (and functionality). It is a more efficient way to ensure that data are always up-to-date.

We will see how to retrieve data through the OData API.

::: callout-important
For advanced users: encrypted data can only be retrieved through the RESTful API.
:::

**Instructions:**

1.  Connect to the ODK Central server data set (give access to a dummy ODK Central project for demo purpose).
2.  Retrieve data from form.
3.  Store the data set into a data frame called df4

::: callout-tip
-   R: use the [ru_setup](https://docs.ropensci.org/ruODK/reference/ru_setup.html) and the [odata_submission_get](https://docs.ropensci.org/ruODK/reference/odata_submission_get.html) functions from the `ruODK` package [@mayer20].
-   Python: use functions from the `pyODK` package.
:::

```{r}
#| echo: true
# Write your code here
```

# References
