---
title: "Introduction to Dynamic documents and Quarto"
subtitle: "Data Science for Public Health - Day 01 - Session 01"
institute: "Ifakara Health Institute / Swiss Tropical and Public Health Institute"
date: "2022-09-26"
format:
  revealjs:
    slide-number: true
    chalkboard: true
    html-q-tags: true
editor: visual
from: markdown+emoji
execute:
  echo: true
  warning: false
engine: knitr
bibliography: references.bib
---

## What is a dynamic (analysis) document?

A document that contains:

-   programming language instructions
-   output associated with these instructions (plot, table, etc)
-   structured text
-   possibly other types of content such as for instance mathematical notations, images, etc
-   in a format where the output gets updated automatically every time the code is run.

## Output formats

A dynamic document can be rendered into to many output formats including:

-   HTML documents
-   PDF documents
-   Word documents
-   PPT documents
-   and many more formats

## Why using dynamic documents?

## How to generate dynamic documents?

## Quarto vs. R Markdown

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>. At its core, Quarto works the same way as R Markdown:

![](images/rstudio-qmd-how-it-works.png)

The goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. Quarto combines the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system with "batteries included" that reflects everything we've learned from R Markdown over the past 10 years.

The number of languages and runtimes used for scientific discourse is very broad (and the Jupyter ecosystem in particular is extraordinarily popular). Quarto is at its core multi-language and multi-engine (supporting Knitr, Jupyter, and Observable today and potentially other engines tomorrow).

On the other hand, R Markdown is fundamentally tied to R which severely limits the number of practitioners it can benefit. Quarto is RStudio's attempt to bring R Markdown to everyone! Unlike R Markdown, Quarto doesn't have a dependency or requirement for R. Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia, with the idea that it will work even for languages that don't yet exist.

While it is a "new" system, it should also be noted that it is highly compatible with existing content: you can render most R Markdown documents and Jupyter notebooks unmodified with Quarto. The concept is to make a major, long term investment in reproducible research, while keeping it compatible with existing formats and adaptable to the various environments users work in.

## How to create a new Quarto document?

![](images/paste-B7A5D281.png)

## Quarto document structure

![](images/paste-64C26A24.png)

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.

![](images/paste-81CB00A2.png)

You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

# For (advanced) Python/R Markdown users only

You still need to import the R package `reticulate` if you want to use the Knitr engine and manipulate Python objects within R code chunks.

```{r}
#| echo: true
library(reticulate)
```

## Manipulation of R objects in Python code chunks

R objects can be manipulated in Python code chunks by referring to them as `r.`

```{r}
#| echo: true
val <- 10
```

```{python}
#| echo: true
val = 5
print(r.val)
```

## Manipulation of Python objects in R code chunks

Python objects can be manipulated in R code chunks by referring to them as `py$`

```{r}
#| echo: true
print(val)
print(py$val)
```

## References
